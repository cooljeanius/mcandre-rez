#pragma once

/**
 * @copyright 2021 YelloSoft
 * @mainpage
 *
 * @ref rez runs C++ tasks.
 */

#include <filesystem>
#include <optional>

/**
 * @brief rez manages C++ tasks.
 */
namespace rez {
/**
 * @brief Version is semver.
 */
static const char *Version = "0.0.1";

/**
 * @brief RezFile denotes the path to the task definition source file.
 */
static const char *RezFile = "rez.cpp";

/**
 * @brief CacheDir denotes the path to the rez internal cache directory.
 */
static const char *CacheDir = ".rez";

/**
 * @brief CacheFileBasename denotes the basename of the rez internal cache file.
 *
 * The cache file is nested as a subfile of @ref CacheDir.
 *
 * The file is primarily in Windows runtime environments to track low level MSVC configuration details.
 */
static const char *CacheFileBasename = "rez-env.txt";

/**
 * @brief ArtifactDirBasename denotes the basename of the cache subdirectory where user task binaries are housed.
 */
static const char *ArtifactDirBasename = "bin";

/**
 * @brief ArtifactBinaryUnix denotes the basename of user task binaries generated by UNIX compilers.
 */
static const char *ArtifactBinaryUnix = "rez";

/**
 * @brief DefaultCompilerWindows denotes the standard Microsoft Visual C++ (MSVC) compiler executable basename.
 *
 * This compiler is activated automatically when the runtime environment is detected as (COMSPEC) Windows.
 *
 * The compiler may be overridden by supplying a non-blank value to the CXX environment variable.
 */
static const char *DefaultCompilerWindows = "cl";

/**
 * @brief DefaultCompilerUnix denotes the standard UNIX C++ compiler executable basename.
 *
 * The compiler may be overridden by supplying a non-blank value to the CXX environment variable.
 */
static const char *DefaultCompilerUnix = "c++";

/**
 * @brief MSVCToolchainQueryScript denotes the standard script which prepares environment variables for executing MSVC cl commands.
 */
static const char *MSVCToolchainQueryScript = R"(C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat)";

/**
 * @brief GetEnvironmentVariable retrieves environment variables.
 *
 * @param key the name of an environment variable
 * @returns std::nullopt on missing environment variables
 */
std::optional<std::string> GetEnvironmentVariable(const std::string &key);

/**
 * @brief DetectWindowsEnvironment determines whether the runtime environment is (COMSPEC) Windows.
 *
 * @returns true when COMSPEC Windows is detected.
 *
 * Native Command Prompt and PowerShell environments are expected to evaluate as Windows.
 *
 * Cygwin-style environments, such as Windows Subsystem for Linux, Cygwin, MinGW, MSYS2, Git Bash, Strawberry Perl, etc., are expected to evaluate as not Windows.
 */
bool DetectWindowsEnvironment();

/**
 * @brief Config parameterizes rez builds.
 */
struct Config {
    /**
     * @brief debug controls whether additional logging is performed. (Default: false)
     *
     * Examples:
     *
     * * false
     * * true
     */
    bool debug = false;

    /**
     * @brief cache_dir_path denotes the location of the internal cache directory. (Default: Determined at runtime by @ref Load)
     *
     * The path may not necessarily exist prior to invoking rez tasks.
     *
     * Example: std::filesystem::path(".rez")
     */
    std::filesystem::path cache_dir_path;

    /**
     * @brief cache_file_path denotes the qualified path of the internal cache file. (Default: Determined at runtime by @ref Load)
     *
     * The path may not necessarily exist prior to invoking rez tasks.
     *
     * Example: std::filesystem::path(".rez\rez-cache.txt")
     */
    std::filesystem::path cache_file_path;

    /**
     * @brief windows denotes whether the runtime environment is (COMSPEC) Windows. (Default: Determined at runtime by @ref Load)
     *
     * Examples:
     *
     * * false
     * * true
     */
    bool windows = false;

    /**
     * @brief compiler denotes the executable used to build the user task tree. (Default: Determined at runtime by @ref Load)
     *
     * Examples:
     *
     * * std::string("c++")
     * * std::string("cl")
     * * std::string("clang++")
     * * std::string("g++")
     */
    std::string compiler;

    /**
     * @brief artifact_path controls whether additional logging is performed. (Default: Determined at runtime by @ref Load)
     *
     * Examples:
     *
     * * std::filesystem::path(".rez/bin/rez")
     * * std::filesystem::path(".rez\bin\rez.exe")
     */
    std::filesystem::path artifact_path;

    /**
     * @brief ApplyMSVCToolchain loads MSVC environment variables for cl into the current process.
     *
     */
    [[nodiscard]] int ApplyMSVCToolchain() const;

    /**
     * @brief Load populates build parameters according to the documented defaults and override mechanisms.
     */
    [[nodiscard]] int Load();
};

/**
 * @brief << formats a Config to an ostream.
 *
 * @param os an output stream
 * @param o a Config
 * @returns the output stream result
 */
std::ostream &operator<<(std::ostream &os, const Config &o);
}
